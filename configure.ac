#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([wndchrm], [1.60], [christopher.coletta@nih.gov])
AM_INIT_AUTOMAKE([foreign subdir-objects])
AM_PATH_PYTHON
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

LT_INIT

# Checks for programs.
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

#--------------------------------------------------------------------
# Check For CUDA Support
#--------------------------------------------------------------------
# initialize array index


# Setup default CUDA paths
CUDA_INSTALL_PATH="/usr/local/cuda"
CUDA_SDK_INSTALL_PATH="/usr/local/cuda"

# Check: enable CUDA?
AC_MSG_CHECKING([Wheather to use disable-CUDA ? ])
AC_ARG_ENABLE(cuda,
    [AS_HELP_STRING(--disable-cuda,disable CUDA support)],
    cudaDisableval="yes",
    cudaDisableval="no")
AC_MSG_RESULT([$cudaDisableval])

# check to see if CUDA been disabled
if test "$cudaDisableval" == "yes"; then
	AC_MSG_WARN([Not using CUDA!])
fi

# Setup custom CUDA paths
AC_ARG_WITH([cuda],
   [AS_HELP_STRING(
        [--with-cuda=PATH],
        [prefix where CUDA is installed @<:@default=auto@:>@])],
   [CUDA_INSTALL_PATH=$withval],
   [with_cuda=auto])
AC_ARG_WITH([cuda-sdk],
   [AS_HELP_STRING(
        [--with-cuda-sdk=PATH],
        [prefix where CUDA SDK is installed @<:@default=auto@:>@])],
   [CUDA_SDK_INSTALL_PATH=$withval],
   [with_cuda_sdk=auto])

# Setup nvcc flags
if test  "$cudaDisableval" = "no"; then
#--------------------------------------------------------------
# Check For CUDA Toolkit
#--------------------------------------------------------------
    if test -e "$CUDA_INSTALL_PATH/bin/nvcc" ; then
	echo "Checking for CUDA :  cuda available"
    else
	AC_MSG_ERROR(Failed to find CUDA compiler)
    fi
    cuda_enable=true;
    NVCCFLAGS="$NVCCFLAGS"
    CUDA_CFLAGS="$CUDA_CFLAGS"
    CUDA_CFLAGS="$CUDA_CFLAGS -I$CUDA_INSTALL_PATH/include"

	if test -e "$CUDA_INSTALL_PATH/lib64/" ; then
		echo 64 bit lib CUDA
		CUDA_LDFLAGS="-L$CUDA_INSTALL_PATH/lib64"
	elif test -e "$CUDA_INSTALL_PATH/lib/" ; then
		echo 32 bit lib CUDA
		CUDA_LDFLAGS="-L$CUDA_INSTALL_PATH/lib"
	else
		AC_MSG_ERROR(Failed to find CUDA libraries )
	fi

    CUDA_LIBS="-lcuda -lcudart -lcufft -lcublas"
    NVCCFLAGS="$NVCCFLAGS $CUDA_CFLAGS $CUDA_LDFLAGS $CUDA_LIBS"
    NVCC="nvcc"
    AC_SUBST(NVCC)
    AC_SUBST(NVCCFLAGS)
    AC_DEFINE([_CUDA],[1],[Defined if CUDA should be used])
fi


#--------------------------------------------------------------------

#AC_PROG_CXX sets CXX to g++ if it cannot find a working C++ compiler 
#thus, we test here whether $CXX is actually working  
AC_LANG_PUSH(C++) 
AC_MSG_CHECKING([whether C++ compiler $CXX works]); 
AC_COMPILE_IFELSE( 
  [AC_LANG_PROGRAM(, [int i=0;])], 
  [AC_MSG_RESULT(yes)], 
  [AC_MSG_RESULT(no) 
  AC_MSG_ERROR(failed to find a C++ compiler or C++ compiler $CXX does not work)] 
) 
AC_LANG_POP(C++) 

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lchrm':
AC_CHECK_LIB([chrm], [main])

dnl ------------------------------------------------------------
dnl check for FFTW3
dnl ------------------------------------------------------------
AC_CHECK_LIB(fftw3,fftw_execute,[AC_DEFINE(HAVE_FFTW3,1,"Turn on FFTW3 support.")],
	[AC_MSG_ERROR([
    FFTW3 library not found.
    Please download+install FFTW 3.x from http://www.fftw.org/download.html
])]
)
AC_CHECK_HEADER(fftw3.h, [],
        AC_MSG_ERROR([
    the <fftw3.h> header file from FFTW3 could not be found.
    Please download+install FFTW 3.x from http://www.fftw.org/download.html
]))

# FIXME: Replace `main' with a function in `-lm':
AC_CHECK_LIB([m], [main])

dnl ------------------------------------------------------------
dnl check for libtiff
dnl ------------------------------------------------------------
AC_CHECK_LIB(tiff, TIFFReadScanline)
AC_CHECK_HEADER(tiffio.h,LIBTIFF='yes',AC_MSG_ERROR([
    *** WND_CHARM requires libtiff; (Required TIFF headers not found) ***
    Please download+install libtiff from http://www.libtiff.org/
]))

# Checks for header files.
AC_CHECK_HEADERS([fcntl.h float.h limits.h memory.h stddef.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_INT32_T
AC_TYPE_MODE_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_HEADER_MAJOR
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STRERROR_R
AC_FUNC_STRTOD
AC_CHECK_FUNCS([bzero floor ftruncate memmove memset mkdir pow select sqrt strchr strerror strrchr strstr strtol])

dnl ------------------------------------------------------------
dnl check for TR1 stuff individually
dnl ------------------------------------------------------------
AC_DEFUN([AC_HEADER_TR1_UNORDERED_MAP], [
  AC_CACHE_CHECK(for tr1/unordered_map,
  ac_cv_cxx_tr1_unordered_map,
  [AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([#include <tr1/unordered_map>], [using std::tr1::unordered_map;],
  ac_cv_cxx_tr1_unordered_map=yes, ac_cv_cxx_tr1_unordered_map=no)
  AC_LANG_RESTORE
  ])
  if test "$ac_cv_cxx_tr1_unordered_map" = yes; then
    AC_DEFINE(HAVE_TR1_UNORDERED_MAP,,[Define if tr1/unordered_map is present. ])
  fi
])
AC_HEADER_TR1_UNORDERED_MAP
AC_DEFUN([AC_HEADER_TR1_UNORDERED_SET], [
  AC_CACHE_CHECK(for tr1/unordered_set,
  ac_cv_cxx_tr1_unordered_set,
  [AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([#include <tr1/unordered_set>], [using std::tr1::unordered_set;],
  ac_cv_cxx_tr1_unordered_set=yes, ac_cv_cxx_tr1_unordered_set=no)
  AC_LANG_RESTORE
  ])
  if test "$ac_cv_cxx_tr1_unordered_set" = yes; then
    AC_DEFINE(HAVE_TR1_UNORDERED_SET,,[Define if tr1/unordered_set is present. ])
  fi
])
AC_HEADER_TR1_UNORDERED_SET

dnl ------------------------------------------------------------
dnl check for native unordered_map and unordered_set individually
dnl ------------------------------------------------------------
AC_DEFUN([AC_HEADER_UNORDERED_MAP], [
  AC_CACHE_CHECK(for native unordered_map,
  ac_unordered_map,
  [AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([#include <unordered_map>], [using std::unordered_map;],
  ac_unordered_map=yes, ac_unordered_map=no)
  AC_LANG_RESTORE
  ])
  if test "$ac_unordered_map" = yes; then
    AC_DEFINE(HAVE_UNORDERED_MAP,,[Define if native unordered_map is present. ])
  fi
])
AC_HEADER_UNORDERED_MAP
AC_DEFUN([AC_HEADER_UNORDERED_SET], [
  AC_CACHE_CHECK(for native unordered_set,
  ac_unordered_set,
  [AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([#include <unordered_set>], [using std::unordered_set;],
  ac_unordered_set=yes, ac_unordered_set=no)
  AC_LANG_RESTORE
  ])
  if test "$ac_unordered_set" = yes; then
    AC_DEFINE(HAVE_UNORDERED_SET,,[Define if native unordered_set is present. ])
  fi
])
AC_HEADER_UNORDERED_SET

AC_ARG_ENABLE(class-prob-tsv,
 [  --enable-class-prob-tsv   When creating a report, output a tsv\
  containing the Average Class Probability Matrix data for the purpose \
  of computing Morphological Divergence Scores],
 [ AC_DEFINE(AVG_CLASS_PROB_TSV,,[Define optional output. ]) 
 ])


#Set Variable for check CUDA support in Makefile.am
AM_CONDITIONAL(CUDA_ENABLE, test x$cuda_enable = xtrue)
AC_CONFIG_FILES([Makefile src/Makefile])
AC_OUTPUT
